package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptEXP = createDescriptorForEXP();
  /*package*/ final ConceptDescriptor myConceptIfElseStat = createDescriptorForIfElseStat();
  /*package*/ final ConceptDescriptor myConceptProgram = createDescriptorForProgram();
  /*package*/ final ConceptDescriptor myConceptSTATEMENT = createDescriptorForSTATEMENT();
  /*package*/ final ConceptDescriptor myConceptadd = createDescriptorForadd();
  /*package*/ final ConceptDescriptor myConceptnatcon = createDescriptorFornatcon();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptEXP, myConceptIfElseStat, myConceptProgram, myConceptSTATEMENT, myConceptadd, myConceptnatcon);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.EXP:
        return myConceptEXP;
      case LanguageConceptSwitch.IfElseStat:
        return myConceptIfElseStat;
      case LanguageConceptSwitch.Program:
        return myConceptProgram;
      case LanguageConceptSwitch.STATEMENT:
        return myConceptSTATEMENT;
      case LanguageConceptSwitch.add:
        return myConceptadd;
      case LanguageConceptSwitch.natcon:
        return myConceptnatcon;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForEXP() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "EXP", 0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b48cb6L);
    b.interface_();
    b.origin("r:6b40a743-6cb7-44e7-8fb5-b04e051122a2(NewLanguage.structure)/7041084399532936374");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfElseStat() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "IfElseStat", 0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b4f0ceL);
    b.class_(false, false, false);
    b.parent(0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b4f0d3L);
    b.origin("r:6b40a743-6cb7-44e7-8fb5-b04e051122a2(NewLanguage.structure)/7041084399532961998");
    b.version(2);
    b.aggregate("then", 0x61b6f4f4c3b5114cL).target(0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b4f0d3L).optional(true).ordered(true).multiple(true).origin("7041084399532970316").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProgram() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "Program", 0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b4e4aeL);
    b.class_(false, false, true);
    b.origin("r:6b40a743-6cb7-44e7-8fb5-b04e051122a2(NewLanguage.structure)/7041084399532958894");
    b.version(2);
    b.aggregate("exp", 0x61b6f4f4c3b4e652L).target(0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b48cb6L).optional(true).ordered(true).multiple(true).origin("7041084399532959314").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSTATEMENT() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "STATEMENT", 0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b4f0d3L);
    b.interface_();
    b.origin("r:6b40a743-6cb7-44e7-8fb5-b04e051122a2(NewLanguage.structure)/7041084399532962003");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForadd() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "add", 0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b48cbfL);
    b.class_(false, false, false);
    b.parent(0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b48cb6L);
    b.origin("r:6b40a743-6cb7-44e7-8fb5-b04e051122a2(NewLanguage.structure)/7041084399532936383");
    b.version(2);
    b.aggregate("left", 0x61b6f4f4c3b48ccbL).target(0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b48cb6L).optional(false).ordered(true).multiple(false).origin("7041084399532936395").done();
    b.aggregate("right", 0x61b6f4f4c3b48cceL).target(0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b48cb6L).optional(false).ordered(true).multiple(false).origin("7041084399532936398").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorFornatcon() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NewLanguage", "natcon", 0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b4eccaL);
    b.class_(false, false, false);
    b.parent(0xd73f8878631742a1L, 0x939f6ad639e79df8L, 0x61b6f4f4c3b48cb6L);
    b.origin("r:6b40a743-6cb7-44e7-8fb5-b04e051122a2(NewLanguage.structure)/7041084399532960970");
    b.version(2);
    b.property("ival", 0x61b6f4f4c3b4eccfL).type(PrimitiveTypeId.INTEGER).origin("7041084399532960975").done();
    return b.create();
  }
}
